/*
[동적 바인딩]
1. 동적 바인딩
	- 오버라이딩된 함수가 무조건 호출
	- 실행 시간 바인딩 (run-time binding) 또는 늦은 바인딩(late binding)

2. 동적 바인딩이 발생하는 경우
	- 기본 클래스 내의 멤버 함수가 가상 함수 호출
	- 파생 클래스 내의 멤버 함수가 가상 함수 호출
	- main()과 같은 외부 함수에서 기본 클래스의 포인터로 가상 함수 호출
	- 다른 클래스에서 가상 함수 호출

	가상 함수를 호출하면 무조건 동적 바인딩을 통해 
	파생클래스에 오버라이딩된 가상 함수가 실행됨

3. 오버라이딩
	- 가상 함수의 이름과 매개 변수 타입, 개수뿐 아니라 리턴 타입도 일치해야 성공
	- 오버라이딩 시 virtual 지시어 생략 가능 (파생 클래스에서만 생략)

4. 정적 바인딩
	- 범위 지정 연산자(::)를 이용해 기본 클래스의 가상 함수 호출
		Ex1) 클래스 외부에서 호출하는 경우
			 Circle circle;
			 Shape *pShape = &circle;
			 pShape->Shape::draw(); //정적 바인딩. Shape의 멤버 함수 draw() 호출
		Ex2) 클래스 멤버 함수에서 호출
			 Shape::draw(); //기본 클래스 Shape의 draw() 실행.

5. 가상 소멸자
	생성자는 가상 함수가 될 수 없으며 생성자에서 가상 함수를 호출해도 동적 바인딩이 일어나지 않음.
	소멸자는 가상 함수가 될 수 있으며 가상 함수로 만드는 것이 바람직함.
*/